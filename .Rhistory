setwd("C:/Users/maxac/OneDrive/Desktop/FAM/food-access-map-data")
d <- read.table(results)
d <- read.table("results")
View(d)
View(d)
library(stringr)
library(purrr)
library(dplyr)
library(httr)
get_longitude <- function(geometry) {
return(as.numeric(unlist(strsplit(geometry, ";")[1][[1]][[1]])))
}
get_latitude <- function(geometry) {
return(as.numeric(unlist(strsplit(geometry, ";")[1][[1]][[2]])))
}
geocode_single <- function(search) {
url <- URLencode(paste("https://api.mapbox.com/geocoding/v5/mapbox.places/", search,".json?access_token=", API_KEY, sep = ""))
r <- GET(url)
c <- content(r, as="parsed", type="application/json")
features <- c[[3]]
geometry <- paste(features[[1]]$geometry[2][[1]], collapse=";")
return(geometry)
}
run_geocode <- function(df) {
# STEP 1
df_filter <- df %>%
filter(is.na(latitude) | is.na(longitude) | latitude==0 | longitude==0)
# STEP 2
df_transmute <- df_filter %>% transmute(id = id, address = str_c(address, city, state, zip_code, sep = ", "))
# Step 3
df_geocode <- df_transmute %>% mutate(geometry=map(address, geocode_single))
# Step 4
df_geocode <- df_geocode %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
df_geocode <- df_geocode %>% select(-geometry)
# STEP 5
df <- df %>% left_join(df_geocode %>% select(id, long, lat), by = "id")
df <- df %>% mutate(longitude = ifelse(is.na(longitude), long, longitude),
latitude = ifelse(is.na(latitude), lat, latitude),
latlng_source = ifelse(is.na(latlng_source), "Mapbox Geocode", latlng_source))
df <- df %>% select(-lat, -long)
return(df)
}
run_geocode(d)
API_KEY <- "pk.eyJ1IjoiY29kZWZvcmFtZXJpY2EiLCJhIjoiY2tkZ2owbDdhMjNnbzJ5cDh5cjFtaG96ZyJ9.nFfsX9tZ8T3hDb577SrYyw"
run_geocode(d)
rlang::last_error()
rlang::last_trace()
run_geocode <- function(df) {
browser()
# STEP 1
df_filter <- df %>%
filter(is.na(latitude) | is.na(longitude) | latitude==0 | longitude==0)
# STEP 2
df_transmute <- df_filter %>% transmute(id = id, address = str_c(address, city, state, zip_code, sep = ", "))
# Step 3
df_geocode <- df_transmute %>% mutate(geometry=map(address, geocode_single))
# Step 4
df_geocode <- df_geocode %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
df_geocode <- df_geocode %>% select(-geometry)
# STEP 5
df <- df %>% left_join(df_geocode %>% select(id, long, lat), by = "id")
df <- df %>% mutate(longitude = ifelse(is.na(longitude), long, longitude),
latitude = ifelse(is.na(latitude), lat, latitude),
latlng_source = ifelse(is.na(latlng_source), "Mapbox Geocode", latlng_source))
df <- df %>% select(-lat, -long)
return(df)
}
run_geocode(d)
run_geocode <- function(df) {
# STEP 1
df_filter <- df %>%
filter(is.na(latitude) | is.na(longitude) | latitude==0 | longitude==0)
# STEP 2
df_transmute <- df_filter %>% transmute(id = id, address = str_c(address, city, state, zip_code, sep = ", "))
# Step 3
df_geocode <- df_transmute %>% mutate(geometry=map(address, geocode_single))
browser()
# Step 4
df_geocode <- df_geocode %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
df_geocode <- df_geocode %>% select(-geometry)
# STEP 5
df <- df %>% left_join(df_geocode %>% select(id, long, lat), by = "id")
df <- df %>% mutate(longitude = ifelse(is.na(longitude), long, longitude),
latitude = ifelse(is.na(latitude), lat, latitude),
latlng_source = ifelse(is.na(latlng_source), "Mapbox Geocode", latlng_source))
df <- df %>% select(-lat, -long)
return(df)
}
run_geocode(d)
df_geocode %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
df_geocode %>% mutate(long = (map(geometry, get_longitude)), lat=(map(geometry, get_latitude)))
df_geocode %>% (map(geometry, get_longitude)
)
df_geocode %>% map(geometry, get_longitude)
df_geocode %>% map(df_geocode$geometry, get_longitude)
df_filter[1]
df_filter[[1]]
df_filter[1,]
dfg <- df_geocode[1,]
dfg <- dfg %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[1,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[2,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[5,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[10,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[20,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[1:2,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[1:20,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[1:163,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[1:162,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[1:81,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[1:100,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[1:120,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
dfg <- df_geocode[100:120,] %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
View(df_geocode)
View(df_geocode)
geocode_single("Schenley Plaza, Pittsburgh, PA, 15213.0")
geocode_single <- function(search) {
browser()
url <- URLencode(paste("https://api.mapbox.com/geocoding/v5/mapbox.places/", search,".json?access_token=", API_KEY, sep = ""))
r <- GET(url)
c <- content(r, as="parsed", type="application/json")
features <- c[[3]]
geometry <- paste(features[[1]]$geometry[2][[1]], collapse=";")
return(geometry)
}
geocode_single("Schenley Plaza, Pittsburgh, PA, 15213.0")
geocode_single("314 Commerce St, Wilmerding, PA, 15148")
features[[1]]$geometry$coordinates
features[[1]]$geometry$coordinates[[1]]
paste(features[[1]]$geometry$coordinates[[1]], collapse=";")
paste(features[[1]]$geometry$coordinates, collapse=";")
geocode_single("314 Commerce St, Wilmerding, PA, 15148")
geocode_single <- function(search) {
url <- URLencode(paste("https://api.mapbox.com/geocoding/v5/mapbox.places/", search,".json?access_token=", API_KEY, sep = ""))
r <- GET(url)
c <- content(r, as="parsed", type="application/json")
features <- c[[3]]
geometry <- paste(features[[1]]$geometry$coordinates, collapse=";")
return(geometry)
}
geocode_single("314 Commerce St, Wilmerding, PA, 15148")
geocode_single("Schenley Plaza, Pittsburgh, PA, 15213.0")
exit
run_geocode(d)
run_geocode(d)
View(df_geocode)
View(df_geocode)
run_geocode <- function(df) {
# STEP 1
df_filter <- df %>%
filter(is.na(latitude) | is.na(longitude) | latitude==0 | longitude==0)
# STEP 2
df_transmute <- df_filter %>% transmute(id = id, address = str_c(address, city, state, zip_code, sep = ", "))
# Step 3
df_geocode <- df_transmute %>% mutate(geometry=map(address, geocode_single))
browser()
# Step 4
#[FILTER OUT GEOMETRY RESPONSES THAT CONTAIN ALPHABETIC CHARACTERS]
df_geocode <- df_geocode %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
df_geocode <- df_geocode %>% select(-geometry)
# STEP 5
df <- df %>% left_join(df_geocode %>% select(id, long, lat), by = "id")
df <- df %>% mutate(longitude = ifelse(is.na(longitude), long, longitude),
latitude = ifelse(is.na(latitude), lat, latitude),
latlng_source = ifelse(is.na(latlng_source), "Mapbox Geocode", latlng_source))
df <- df %>% select(-lat, -long)
return(df)
}
geocode_single <- function(search) {
url <- URLencode(paste("https://api.mapbox.com/geocoding/v5/mapbox.places/", search,".json?access_token=", API_KEY, sep = ""))
r <- GET(url)
c <- content(r, as="parsed", type="application/json")
features <- c[[3]]
geometry <- paste(features[[1]]$geometry$coordinates, collapse=";")
return(geometry)
}
get_latitude <- function(geometry) {
return(as.numeric(unlist(strsplit(geometry, ";")[1][[1]][[2]])))
}
get_longitude <- function(geometry) {
return(as.numeric(unlist(strsplit(geometry, ";")[1][[1]][[1]])))
}
run_geocode <- function(df) {
# STEP 1
df_filter <- df %>%
filter(is.na(latitude) | is.na(longitude) | latitude==0 | longitude==0)
# STEP 2
df_transmute <- df_filter %>% transmute(id = id, address = str_c(address, city, state, zip_code, sep = ", "))
# Step 3
df_geocode <- df_transmute %>% mutate(geometry=map(address, geocode_single))
# Step 4
#[FILTER OUT GEOMETRY RESPONSES THAT CONTAIN ALPHABETIC CHARACTERS]
df_geocode <- df_geocode %>% mutate(long = unlist(map(geometry, get_longitude)), lat=unlist(map(geometry, get_latitude)))
df_geocode <- df_geocode %>% select(-geometry)
# STEP 5
df <- df %>% left_join(df_geocode %>% select(id, long, lat), by = "id")
df <- df %>% mutate(longitude = ifelse(is.na(longitude), long, longitude),
latitude = ifelse(is.na(latitude), lat, latitude),
latlng_source = ifelse(is.na(latlng_source), "Mapbox Geocode", latlng_source))
df <- df %>% select(-lat, -long)
return(df)
}
run_geocode(d)
