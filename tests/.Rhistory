devtools::test()
install.packages("roxygen2")
install.Rtools()
library("installr")
install.Rtools()
install.Rtools()
devtools::create("myfirstpackage")
devtools::test()
setwd("C:/Users/maxac/OneDrive/Desktop/FAM/food-access-map-data")
API_KEY <- "pk.eyJ1IjoiY29kZWZvcmFtZXJpY2EiLCJhIjoiY2tkZ2owbDdhMjNnbzJ5cDh5cjFtaG96ZyJ9.nFfsX9tZ8T3hDb577SrYyw"
library(readr)
df <- read_csv("/tests/test-data/test_geocode_one_row_input.csv")
pwd
setwd("C:/Users/maxac/OneDrive/Desktop/FAM/food-access-map-data")
setwd("C:/Users/maxac/OneDrive/Desktop/FAM/food-access-map-data")
df <- read_csv("/tests/test-data/test_geocode_one_row_input.csv")
df <- read_csv("./tests/test-data/test_geocode_one_row_input.csv")
run_geocode <- function(df) {
browser()
# STEP 1
df_filter <- df %>%
filter(is.na(latitude) | is.na(longitude) | latitude==0 | longitude==0)
# STEP 2
df_transmute <- df_filter %>% transmute(id = id, address = str_c(address, city, state, zip_code, sep = ", "))
# Step 3 NEW
df_geocode <- mutate(df_transmute, geometry=geocode_single(address))
# STEP 3 OLD
#df_geocode <- geocode(df_transmute, address, geo="osm", cascade_order=c("osm", "geocodio"))
# Step 3.5
df_geocode$lat <- df_geocode$geometry[1]
df_geocode$long <- df_geocode$geometry[2]
df_geocode <- select(-geometry)
# STEP 4
df <- df %>% left_join(df_geocode %>% select(id, long, lat), by = "id")
df <- df %>% mutate(longitude = ifelse(is.na(longitude), long, longitude),
latitude = ifelse(is.na(latitude), lat, latitude),
latlng_source = ifelse(is.na(latlng_source), "Mapbox Geocode", latlng_source))
df <- df %>% select(-lat, -long)
return(df)
}
geocode_single <- function(search) {
url <- URLencode(paste("https://api.mapbox.com/geocoding/v5/mapbox.places/", search,".json?access_token=", API_KEY, sep = ""))
r <- GET(url)
c <- content(r, as="parsed", type="application/json")
features <- c[[3]]
geometry <- features[[1]]$geometry
return(geometry)
}
run_geocode(df)
source("./data_prep_scripts/auto_geocode_functions.R")
source("./data_prep_scripts/auto_geocode_functions.R")
run_geocode(df)
df_geocode <- mutate(df_transmute, geometry=geocode_single(address))
df_geocode <- mutate(df_transmute, geometry=geocode_single(address)[1])
df_geocode <- mutate(df_transmute, geometry=geocode_single(address))
df_geocode <- mutate(df_transmute, geometry=geocode_single(address)[1])
geocode_single <- function(search) {
browser()
url <- URLencode(paste("https://api.mapbox.com/geocoding/v5/mapbox.places/", search,".json?access_token=", API_KEY, sep = ""))
r <- GET(url)
c <- content(r, as="parsed", type="application/json")
features <- c[[3]]
geometry <- features[[1]]$geometry
return(geometry)
}
df_geocode <- mutate(df_transmute, geometry=geocode_single(address)[1])
features[[1]]$geometry
features[[1]]$geometry[2]
features[[1]]$geometry[2][1]
features[[1]]$geometry[2][1][1]
features[[1]]$geometry[2][[1]]
features[[1]]$geometry[2][[1]][1]
typeof(features[[1]]$geometry[2][[1]][1])
typeof(features[[1]]$geometry[2][[1]])
features[[1]]$geometry[2][[1]]
run_geocode(df)
features[[1]]$geometry[2][[1]]
geocode_single <- function(search) {
browser()
url <- URLencode(paste("https://api.mapbox.com/geocoding/v5/mapbox.places/", search,".json?access_token=", API_KEY, sep = ""))
r <- GET(url)
c <- content(r, as="parsed", type="application/json")
features <- c[[3]]
geometry <- paste(features[[1]]$geometry[2][[1]], collapse=";")
return(geometry)
}
geocode_single <- function(search) {
browser()
url <- URLencode(paste("https://api.mapbox.com/geocoding/v5/mapbox.places/", search,".json?access_token=", API_KEY, sep = ""))
r <- GET(url)
c <- content(r, as="parsed", type="application/json")
features <- c[[3]]
geometry <- paste(features[[1]]$geometry[2][[1]], collapse=";")
return(geometry)
}
run_geocode <- function(df) {
browser()
# STEP 1
df_filter <- df %>%
filter(is.na(latitude) | is.na(longitude) | latitude==0 | longitude==0)
# STEP 2
df_transmute <- df_filter %>% transmute(id = id, address = str_c(address, city, state, zip_code, sep = ", "))
# Step 3 NEW
df_geocode <- mutate(df_transmute, geometry=geocode_single(address))
# STEP 3 OLD
#df_geocode <- geocode(df_transmute, address, geo="osm", cascade_order=c("osm", "geocodio"))
# Step 3.5
df_geocode$long <- strsplit(df_geocode$geometry, ";")[1]
df_geocode$lat <- strsplit(df_geocode$geometry, ";")[2]
df_geocode <- select(-geometry)
# STEP 4
df <- df %>% left_join(df_geocode %>% select(id, long, lat), by = "id")
df <- df %>% mutate(longitude = ifelse(is.na(longitude), long, longitude),
latitude = ifelse(is.na(latitude), lat, latitude),
latlng_source = ifelse(is.na(latlng_source), "Mapbox Geocode", latlng_source))
df <- df %>% select(-lat, -long)
return(df)
}
geocode_single <- function(search) {
browser()
url <- URLencode(paste("https://api.mapbox.com/geocoding/v5/mapbox.places/", search,".json?access_token=", API_KEY, sep = ""))
r <- GET(url)
c <- content(r, as="parsed", type="application/json")
features <- c[[3]]
geometry <- paste(features[[1]]$geometry[2][[1]], collapse=";")
return(geometry)
}
run_geocode(df)
strsplit(df_geocode$geometry, ";")[1]
strsplit(df_geocode$geometry, ";")[1][1]
strsplit(df_geocode$geometry, ";")[[1]]
strsplit(df_geocode$geometry, ";")[1][[1]]
strsplit(df_geocode$geometry, ";")[1][[1]][1]
strsplit(df_geocode$geometry, ";")[1][[1]][2]
as.numeric(strsplit(df_geocode$geometry, ";")[1][[1]][1])
source("./data_prep_scripts/auto_geocode_functions.R")
run_geocode(df)
setwd("C:/Users/maxac/OneDrive/Desktop/FAM/food-access-map-data/tests")
df <- read_csv("test-data/test_geocode_one_row_input.csv")
source('../data_prep_scripts/auto_geocode_functions.R')
result <- run_geocode(df)
View(result)
View(result)
exp_output <- read_csv("test-data/test_geocode_one_row_exp_output.csv")
input <- read_csv("test-data/test_geocode_one_row_input.csv")
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
expect_equal(round(input$longitude, digits=3), round(exp_output$longitude, digits=3))
library(testthat)
expect_equal(round(input$longitude, digits=3), round(exp_output$longitude, digits=3))
expect_equal(round(output$longitude, digits=3), round(exp_output$longitude, digits=3))
expect_equal(round(output$latitude, digits=3), round(exp_output$latitude, digits=3))
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
expect_equal(round(output$latitude, digits=2), round(exp_output$latitude, digits=2))
input <- read_csv("test-data/test_geocode_three_rows_input.csv")
exp_output <- read_csv("test-data/test_geocode_three_rows_exp_output.csv")
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
expect_equal(round(output$latitude, digits=2), round(exp_output$latitude, digits=2))
View(output)
input <- read_csv("test-data/test_geocode_three_rows_input.csv")
exp_output <- read_csv("test-data/test_geocode_three_rows_exp_output.csv")
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
output <- run_geocode(input)
source('../data_prep_scripts/auto_geocode_functions.R')
input <- read_csv("test-data/test_geocode_three_rows_input.csv")
exp_output <- read_csv("test-data/test_geocode_three_rows_exp_output.csv")
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
output <- run_geocode(input)
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
df_transmute %>% mutate(geometry=map(address, geocode_single))
head(df_transmute %>% mutate(geometry=map(address, geocode_single)))
df_transmute %>% mutate(geometry=map(address, geocode_single))$geometry[1]
df_transmute %>% mutate(geometry=map(address, geocode_single))$geometry
df_transmute %>% mutate(geometry=map(address, geocode_single))
(df_transmute %>% mutate(geometry=map(address, geocode_single)))$geometry
df_geocode <- df_transmute %>% mutate(geometry=map(address, geocode_single))
View(df_geocode)
View(df_geocode)
# Step 4
df_geocode$long <- as.numeric(strsplit(df_geocode$geometry, ";")[1][[1]][1])
source('../data_prep_scripts/auto_geocode_functions.R')
input <- read_csv("test-data/test_geocode_one_row_input.csv")
exp_output <- read_csv("test-data/test_geocode_one_row_exp_output.csv")
output <- run_geocode(input)
View(df_geocode)
View(df_geocode)
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
source('../data_prep_scripts/auto_geocode_functions.R')
input <- read_csv("test-data/test_geocode_one_row_input.csv")
exp_output <- read_csv("test-data/test_geocode_one_row_exp_output.csv")
output <- run_geocode(input)
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
source('../data_prep_scripts/auto_geocode_functions.R')
input <- read_csv("test-data/test_geocode_one_row_input.csv")
exp_output <- read_csv("test-data/test_geocode_one_row_exp_output.csv")
output <- run_geocode(input)
n
source('../data_prep_scripts/auto_geocode_functions.R')
input <- read_csv("test-data/test_geocode_one_row_input.csv")
exp_output <- read_csv("test-data/test_geocode_one_row_exp_output.csv")
output <- run_geocode(input)
run_geocode <- function(df) {
browser()
# STEP 1
df_filter <- df %>%
filter(is.na(latitude) | is.na(longitude) | latitude==0 | longitude==0)
# STEP 2
df_transmute <- df_filter %>% transmute(id = id, address = str_c(address, city, state, zip_code, sep = ", "))
# Step 3
df_geocode <- df_transmute %>% mutate(geometry=map(address, geocode_single))
# Step 4
df_geocode <- df_geocode %>% mutate(long = map(geometry, get_longitude), lat=map(geometry, get_latitude))
df_geocode <- df_geocode %>% select(-geometry)
# STEP 5
df <- df %>% left_join(df_geocode %>% select(id, long, lat), by = "id")
df <- df %>% mutate(longitude = ifelse(is.na(longitude), long, longitude),
latitude = ifelse(is.na(latitude), lat, latitude),
latlng_source = ifelse(is.na(latlng_source), "Mapbox Geocode", latlng_source))
df <- df %>% select(-lat, -long)
return(df)
}
output <- run_geocode(input)
get_latitude <- function(geometry) {
return(as.numeric(strsplit(geometry, ";")[1][[1]][2][1]))
}
get_longitude <- function(geometry) {
return(as.numeric(strsplit(geometry, ";")[1][[1]][1][1]))
}
output <- run_geocode(input)
source('../data_prep_scripts/auto_geocode_functions.R')
input <- read_csv("test-data/test_geocode_one_row_input.csv")
exp_output <- read_csv("test-data/test_geocode_one_row_exp_output.csv")
output <- run_geocode(input)
source('../data_prep_scripts/auto_geocode_functions.R')
input <- read_csv("test-data/test_geocode_one_row_input.csv")
exp_output <- read_csv("test-data/test_geocode_one_row_exp_output.csv")
output <- run_geocode(input)
source('../data_prep_scripts/auto_geocode_functions.R')
input <- read_csv("test-data/test_geocode_one_row_input.csv")
exp_output <- read_csv("test-data/test_geocode_one_row_exp_output.csv")
exp_output <- read_csv("test-data/test_geocode_one_row_exp_output.csv")
output <- run_geocode(input)
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
as.numeric(unlist(strsplit(geometry, ";")[1][[1]][[2]]))
typeof(as.numeric(unlist(strsplit(geometry, ";")[1][[1]][[2]])))
f
f
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
temp <- df_geocode %>% mutate(long = map(geometry, get_longitude), lat=map(geometry, get_latitude))
temp <- df_geocode %>% mutate(long = unlist(map(geometry, get_longitude)), lat=map(geometry, get_latitude))
source('../data_prep_scripts/auto_geocode_functions.R')
input <- read_csv("test-data/test_geocode_one_row_input.csv")
exp_output <- read_csv("test-data/test_geocode_one_row_exp_output.csv")
output <- run_geocode(input)
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
expect_equal(round(output$latitude, digits=2), round(exp_output$latitude, digits=2))
input <- read_csv("test-data/test_geocode_three_rows_input.csv")
exp_output <- read_csv("test-data/test_geocode_three_rows_exp_output.csv")
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
expect_equal(round(output$latitude, digits=2), round(exp_output$latitude, digits=2))
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=1))
2
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
expect_equal(round(output$longitude, digits=3), round(exp_output$longitude, digits=3))
expect_equal(round(output$longitude, digits=3), round(exp_output$longitude, digits=4))
2
View(exp_output)
View(exp_output)
View(output)
View(output)
exp_output <- read_csv("test-data/test_geocode_three_rows_exp_output.csv")
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
expect_equal(round(output$latitude, digits=2), round(exp_output$latitude, digits=2))
input <- read_csv("test-data/test_geocode_six_rows_input_half_with_coords_input.csv")
#Tests for merge-duplicates
library("readr")
input <- read_csv("test-data/test_geocode_six_rows_input_half_with_coords_input.csv")
exp_output <- read_csv("test-data/test_geocode_three_rows_exp_output.csv")
input <- read_csv("test-data/test_geocode_six_rows_input_half_with_coords_input.csv")
input <- read_csv("test-data/test_geocode_six_rows_half_with_coords_input.csv")
source('../data_prep_scripts/auto_geocode_functions.R')
output <- run_geocode(input)
API_KEY <- pk.eyJ1IjoiY29kZWZvcmFtZXJpY2EiLCJhIjoiY2tkZ2owbDdhMjNnbzJ5cDh5cjFtaG96ZyJ9.nFfsX9tZ8T3hDb577SrYyw
API_KEY <- "pk.eyJ1IjoiY29kZWZvcmFtZXJpY2EiLCJhIjoiY2tkZ2owbDdhMjNnbzJ5cDh5cjFtaG96ZyJ9.nFfsX9tZ8T3hDb577SrYyw"
output <- run_geocode(input)
View(output)
View(output)
View(output)
exp_output <- read_csv("test-data/test_geocode_six_rows_half_with_coords_exp_output.csv")
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
library("testthat")
expect_equal(round(output$longitude, digits=2), round(exp_output$longitude, digits=2))
expect_equal(round(output$latitude, digits=2), round(exp_output$latitude, digits=2))
